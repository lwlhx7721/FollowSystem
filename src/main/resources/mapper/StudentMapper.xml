<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace目前可以自定义要唯一，将来面向接口编程时对应dao接口，
一 个mapper相当于一个dao接口的实现类 -->
<mapper namespace="com.jxd.dao.IStudentDao">
    <!--List<Map<String, Object>> getAllStudent(String stuName, int classId, int deptId);-->
    <select id="getAllStudent" resultType="map">
        SELECT
        s.stuId,s.stuName,s.sex,s.nation,s.birthday,s.birthPlace,s.marry,
        s.telephone,s.idCard,s.university,s.major,s.photo,s.note,s.state,
        s.classId,s.deptId,cl.className,d.deptName
        FROM
        student AS s
        INNER JOIN class AS cl ON s.classId = cl.classId
        INNER JOIN dept AS d ON s.deptId = d.deptId
        <where>
         s.stuName like concat('%',#{stuName},'%')
            <if test="classId != 0">
                and cl.classId = #{classId}
            </if>
            <if test="deptId != 0">
                and d.deptId = #{deptId}
            </if>
        </where>
    </select>

    <!--List<Map<String, Object>> getAllStudentByPage(String stuName, int classId, int deptId, int pageIndex, int pageSize);-->
    <select id="getAllStudentByPage" resultType="map">
        SELECT
        s.stuId,s.stuName,s.sex,s.nation,s.birthday,s.birthPlace,s.marry,
        s.telephone,s.idCard,s.university,s.major,s.photo,s.note,s.state,
        s.classId,s.deptId,cl.className,d.deptName
        FROM
        student AS s
        INNER JOIN class AS cl ON s.classId = cl.classId
        INNER JOIN dept AS d ON s.deptId = d.deptId
        <where>
            s.stuName like concat('%',#{stuName},'%')
            <if test="classId != 0">
                and cl.classId = #{classId}
            </if>
            <if test="deptId != 0">
                and d.deptId = #{deptId}
            </if>
        </where>
        order by s.stuId limit #{pageIndex}, #{pageSize}
    </select>

    <!-- boolean addStudents(Student student);-->
    <insert id="addStudents">
        insert into student(stuname, sex, nation, birthday, birthPlace, marry, telephone, idCard, university, major, note, photo, classId, deptId,state)
        values (#{stuName}, #{sex}, #{nation}, #{birthday}, #{birthPlace}, #{marry}, #{telephone}, #{idCard}, #{university}, #{major}, #{note}, #{photo}, #{classId}, 1000006, '培训')
    </insert>
    <!-- boolean updStudents(Student student);-->
    <update id="updStudents">
        update student set stuname = #{stuName}, sex = #{sex}, nation = #{nation}, birthday = #{birthday}, birthPlace = #{birthPlace}, marry = #{marry},
         telephone = #{telephone}, idCard = #{idCard}, university = #{university}, major = #{major}, note = #{note}, photo = #{photo}, classId = #{classId}
        where stuId = #{stuId}
    </update>

    <!--List<Map<String, Object>> getStudentsById(int stuId);-->
    <select id="getStudentById" resultType="map">
        SELECT
        s.stuId,s.stuName,s.sex,s.nation,s.birthday,s.birthPlace,s.marry,
        s.telephone,s.idCard,s.university,s.major,s.photo,s.note,s.state,
        s.classId,s.deptId,cl.className,d.deptName
        FROM
        student AS s
        INNER JOIN class AS cl ON s.classId = cl.classId
        INNER JOIN dept AS d ON s.deptId = d.deptId
        where s.stuId = #{stuId}
    </select>

    <!--boolean delStudentByStuId(String stuId);-->
    <delete id="delStudentByStuId">
        delete from student where stuId = #{stuId}
    </delete>

    <!--boolean delStudentsById(String stuIds);-->
    <delete id="delStudentsById">
        delete from student where stuId in ${stuIds}
    </delete>
</mapper>